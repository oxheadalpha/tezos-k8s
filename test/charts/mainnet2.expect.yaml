---
# Source: tezos-chain/templates/configs.yaml
---
apiVersion: v1
data:
  ACCOUNTS: |
    e30=
kind: Secret
metadata:
  name: tezos-secret
  namespace: testing
---
# Source: tezos-chain/templates/configs.yaml
apiVersion: v1
data:
  CHAIN_NAME: "mainnet"
  CHAIN_PARAMS: |
    {
      "bootstrap_peers": [],
      "default_bootstrap_mutez": "4000000000000",
      "expected-proof-of-work": 26,

      "should_generate_unsafe_deterministic_data": false,
      "network": {
          "chain_name": "mainnet"
        },
      "protocol_activation": null
    }
  FULL_SNAPSHOT_URL: "https://mainnet.xtz-shots.io/full"
  FULL_TARBALL_URL: ""
  ROLLING_SNAPSHOT_URL: "https://mainnet.xtz-shots.io/rolling"
  ROLLING_TARBALL_URL: ""
  ARCHIVE_TARBALL_URL: "https://mainnet.xtz-shots.io/archive-tarball"
  NODE_GLOBALS: |
    {
      "env": {
        "all": {
          "key": "outer-value"
        },
        "octez-node": {
          "TEZOS_LOG": "* -\u003e DEBUG"
        },
        "snapshot-downloader": {
          "key": "outer-container"
        }
      }
    }

  NODES: |
    {
      "city-block": {
        "instances": [
          {}
        ],
        "runs": [
          "tezedge_node",
          "logger",
          "metrics"
        ]
      },
      "country-town": {
        "env": {
          "all": {
            "key": "specific-pod"
          },
          "snapshot-downloader": {
            "key": "specific-container"
          }
        },
        "images": {
          "octez": "tezos/tezos:v14-release"
        },
        "instances": [
          {
            "config": {
              "shell": {
                "history_mode": "rolling"
              }
            }
          },
          {
            "config": {
              "shell": {
                "history_mode": {
                  "rolling": {
                    "additional_cycles": 5
                  }
                }
              }
            }
          }
        ],
        "runs": [
          "octez_node",
          "logger",
          "metrics"
        ]
      }
    }

  SIGNERS: |
    {}
kind: ConfigMap
metadata:
  name: tezos-config
  namespace: testing
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: tezos-node-rpc
  namespace: testing
spec:
  ports:
    - port: 8732
      name: rpc
  selector:
    appType: tezos-node
  type: NodePort
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: city-block
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: city-block
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: country-town
spec:
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: country-town
---
# Source: tezos-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: city-block
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: city-block
  selector:
    matchLabels:
      node_class: city-block
  template:
    metadata:
      labels:
        appType: tezos-node
        node_class: city-block
    spec:
      containers:                
        - name: tezedge-node
          image: "tezedge/tezedge:v1.6.8"
          imagePullPolicy: IfNotPresent
          command:
            - /light-node
          args:
            - --config-file=/etc/tezos/tezedge.conf
          envFrom:
          env:
            - name: DAEMON
              value: tezedge-node
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          ports:
            - containerPort: 8732
              name: tezos-rpc
            - containerPort: 9732
              name: tezos-net
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                        
        - name: logger
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - logger
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: logger
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - image: "registry.gitlab.com/nomadic-labs/tezos-metrics"
          args:
            - "--listen-prometheus=6666"
            - "--data-dir=/var/tezos/node/data"
          imagePullPolicy: IfNotPresent
          name: metrics
          ports:
            - containerPort: 6666
              name: tezos-metrics
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: tezos-metrics                
        - name: sidecar
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: sidecar
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
      initContainers:        
        - name: config-init
          image: "tezos/tezos:v14-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              echo "Writing custom configuration for public node"
              mkdir -p /etc/tezos/data
              
              #
              # This is my comment.
              
              /usr/local/bin/tezos-node config init		\
                  --config-file /etc/tezos/data/config.json	\
                  --data-dir /etc/tezos/data			\
                  --network $CHAIN_NAME
              
              cat /etc/tezos/data/config.json
              
              printf "\n\n\n\n\n\n\n"
              
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: config-init
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume                
        - name: config-generator
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: config-generator
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts        
        - name: snapshot-downloader
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - snapshot-downloader
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: snapshot-downloader
            - name:  key
              value: "outer-container"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - name: snapshot-importer
          image: "tezos/tezos:v14-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              bin_dir="/usr/local/bin"
              data_dir="/var/tezos"
              node_dir="$data_dir/node"
              node_data_dir="$node_dir/data"
              node="$bin_dir/tezos-node"
              snapshot_file=${node_dir}/chain.snapshot
              
              if [ -d ${node_data_dir}/context ]; then
                  echo "Blockchain has already been imported. If a tarball"
                  echo "instead of a regular tezos snapshot was used, it was"
                  echo "imported in the snapshot-downloader container."
                  exit 0
              fi
              
              cp -v /etc/tezos/config.json ${node_data_dir}
              
              ${node} snapshot import ${snapshot_file} --data-dir ${node_data_dir} \
                  --network $CHAIN_NAME
              find ${node_dir}
              
              rm -rvf ${snapshot_file}
              
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: city-block
            - name: DAEMON
              value: snapshot-importer
            - name:  key
              value: "outer-value"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
      securityContext:
        fsGroup: 100      
      volumes:
        - hostPath:
            path: /dev/net/tun
          name: dev-net-tun
        - emptyDir: {}
          name: config-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
        - name: per-block-votes
          configMap:
            name: per-block-votes
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
---
# Source: tezos-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: country-town
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 2
  serviceName: country-town
  selector:
    matchLabels:
      node_class: country-town
  template:
    metadata:
      labels:
        appType: tezos-node
        node_class: country-town
    spec:
      containers:        
        - name: octez-node
          image: "tezos/tezos:v14-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -x
              
              set
              
              # ensure we can run tezos-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing tezos-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/tezos-node run				\
              			--bootstrap-threshold 0			\
              			--config-file /etc/tezos/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: octez-node
            - name:  TEZOS_LOG
              value: "* -> DEBUG"
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          ports:
            - containerPort: 8732
              name: tezos-rpc
            - containerPort: 9732
              name: tezos-net
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                                
        - name: logger
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - logger
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: logger
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - image: "registry.gitlab.com/nomadic-labs/tezos-metrics"
          args:
            - "--listen-prometheus=6666"
            - "--data-dir=/var/tezos/node/data"
          imagePullPolicy: IfNotPresent
          name: metrics
          ports:
            - containerPort: 6666
              name: tezos-metrics
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: tezos-metrics                
        - name: sidecar
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: sidecar
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
      initContainers:        
        - name: config-init
          image: "tezos/tezos:v14-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              echo "Writing custom configuration for public node"
              mkdir -p /etc/tezos/data
              
              #
              # This is my comment.
              
              /usr/local/bin/tezos-node config init		\
                  --config-file /etc/tezos/data/config.json	\
                  --data-dir /etc/tezos/data			\
                  --network $CHAIN_NAME
              
              cat /etc/tezos/data/config.json
              
              printf "\n\n\n\n\n\n\n"
              
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: config-init
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume                
        - name: config-generator
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: config-generator
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts        
        - name: snapshot-downloader
          image: "tezos-k8s-utils:dev"
          imagePullPolicy: IfNotPresent
          args:
            - snapshot-downloader
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: snapshot-downloader
            - name:  key
              value: "specific-container"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - name: snapshot-importer
          image: "tezos/tezos:v14-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              bin_dir="/usr/local/bin"
              data_dir="/var/tezos"
              node_dir="$data_dir/node"
              node_data_dir="$node_dir/data"
              node="$bin_dir/tezos-node"
              snapshot_file=${node_dir}/chain.snapshot
              
              if [ -d ${node_data_dir}/context ]; then
                  echo "Blockchain has already been imported. If a tarball"
                  echo "instead of a regular tezos snapshot was used, it was"
                  echo "imported in the snapshot-downloader container."
                  exit 0
              fi
              
              cp -v /etc/tezos/config.json ${node_data_dir}
              
              ${node} snapshot import ${snapshot_file} --data-dir ${node_data_dir} \
                  --network $CHAIN_NAME
              find ${node_dir}
              
              rm -rvf ${snapshot_file}
              
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: country-town
            - name: DAEMON
              value: snapshot-importer
            - name:  key
              value: "specific-pod"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
      securityContext:
        fsGroup: 100      
      volumes:
        - hostPath:
            path: /dev/net/tun
          name: dev-net-tun
        - emptyDir: {}
          name: config-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
        - name: per-block-votes
          configMap:
            name: per-block-votes
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
