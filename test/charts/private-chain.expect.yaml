---
# Source: tezos-chain/templates/tacoinfra-remote-signer/main.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tacoinfra-signer
---
# Source: tezos-chain/templates/configs.yaml
---

apiVersion: v1
data:
  ACCOUNTS: |
    eyJ0YWNvaW5mcmFTaWduZXIiOnsiYWNjb3VudF9uYW1lIjoidGFjb2luZnJhU2lnbmVyIiwia2V5Ijoic3Bway4uLiIsImtleV9pZCI6ImFsaWFzLy4uLiJ9fQ==
kind: Secret
metadata:
  name: tezos-secret
  namespace: testing
---
# Source: tezos-chain/templates/tacoinfra-remote-signer/main.yaml
apiVersion: v1
kind: Secret
metadata:
  name: tacoinfra-signer
  namespace: testing
  labels:
    helm.sh/chart: tezos-chain-0.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  accounts.json: |
    W3siYWNjb3VudF9uYW1lIjoidGFjb2luZnJhU2lnbmVyIiwia2V5Ijoic3Bway4uLiIsImtleV9pZCI6ImFsaWFzLy4uLiJ9XQ==
---
# Source: tezos-chain/templates/configs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tezos-config
  namespace: testing
data:
  CHAIN_NAME: "elric"
  CHAIN_PARAMS: |
    {
      "bootstrap_peers": [],
      "default_bootstrap_mutez": "4000000000000",
      "expected-proof-of-work": 0,

      "should_generate_unsafe_deterministic_data": true,
      "network": {
          "activation_account_name": "tezos-baking-node-0",
          "chain_name": "elric",
          "genesis": {
            "block": "BKupwQVt7UoyuBDDpj17NEtT3M8a1hKDTuw1HahdANAMXznC5YC",
            "protocol": "Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P",
            "timestamp": "2021-08-31T16:04:29.430078+00:00"
          }
        },
      "protocol_activation": {
          "deterministic_faucet_number_of_accounts": 1000,
          "deterministic_faucet_seed": "oM0TxIV5gYNVd0T9kasdfnv352",
          "protocol_hash": "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY",
          "protocol_parameters": {
            "baking_reward_bonus_per_slot": "4286",
            "baking_reward_fixed_portion": "10000000",
            "blocks_per_commitment": 4,
            "blocks_per_cycle": 8,
            "blocks_per_stake_snapshot": 4,
            "cache_sampler_state_cycles": 8,
            "cache_script_size": 100000000,
            "cache_stake_distribution_cycles": 8,
            "consensus_committee_size": 7000,
            "consensus_threshold": 4667,
            "cost_per_byte": "250",
            "cycles_per_voting_period": 1,
            "delay_increment_per_round": "5",
            "double_baking_punishment": "640000000",
            "endorsing_reward_per_slot": "2857",
            "frozen_deposits_percentage": 10,
            "hard_gas_limit_per_block": "5200000",
            "hard_gas_limit_per_operation": "1040000",
            "hard_storage_limit_per_operation": "60000",
            "liquidity_baking_subsidy": "2500000",
            "liquidity_baking_sunset_level": 10000000,
            "liquidity_baking_toggle_ema_threshold": 100000,
            "max_operations_time_to_live": 120,
            "max_slashing_period": 2,
            "min_proposal_quorum": 500,
            "minimal_block_delay": "5",
            "minimal_participation_ratio": {
              "denominator": 3,
              "numerator": 2
            },
            "origination_size": 257,
            "preserved_cycles": 3,
            "proof_of_work_threshold": "-1",
            "quorum_max": 7000,
            "quorum_min": 2000,
            "ratio_of_frozen_deposits_slashed_per_double_endorsement": {
              "denominator": 2,
              "numerator": 1
            },
            "sc_rollup_challenge_window_in_blocks": 40,
            "sc_rollup_enable": false,
            "sc_rollup_max_available_messages": 1000000,
            "sc_rollup_origination_size": 6314,
            "seed_nonce_revelation_tip": "125000",
            "tokens_per_roll": "8000000000",
            "tx_rollup_commitment_bond": "10000000000",
            "tx_rollup_cost_per_byte_ema_factor": 120,
            "tx_rollup_enable": true,
            "tx_rollup_finality_period": 10,
            "tx_rollup_hard_size_limit_per_inbox": 500000,
            "tx_rollup_hard_size_limit_per_message": 5000,
            "tx_rollup_max_commitments_count": 30,
            "tx_rollup_max_inboxes_count": 15,
            "tx_rollup_max_messages_per_inbox": 1010,
            "tx_rollup_max_ticket_payload_size": 2048,
            "tx_rollup_max_withdrawals_per_batch": 15,
            "tx_rollup_origination_size": 4000,
            "tx_rollup_rejection_max_proof_size": 30000,
            "tx_rollup_sunset_level": 17280,
            "tx_rollup_withdraw_period": 10
          }
        }
    }
  FULL_SNAPSHOT_URL: ""
  FULL_TARBALL_URL: ""
  ROLLING_SNAPSHOT_URL: ""
  ROLLING_TARBALL_URL: ""
  ARCHIVE_TARBALL_URL: ""
  PREFER_TARBALLS: "false"
  SNAPSHOT_SOURCE: ""
  OCTEZ_VERSION: "tezos/tezos:v15-release"
  NODE_GLOBALS: |
    {
      "env": {}
    }

  NODES: |
    {
      "as": {
        "instances": [
          {}
        ],
        "runs": [
          "octez_node"
        ]
      },
      "eu": {
        "images": {
          "octez": "tezos/tezos:v15-release"
        },
        "instances": [
          {
            "bake_using_accounts": [
              "tezos-baking-node-0",
              "a",
              "b",
              "c",
              "d"
            ],
            "config": {
              "shell": {
                "history_mode": "archive"
              }
            },
            "is_bootstrap_node": true
          },
          {
            "bake_using_account": "tacoinfraSigner",
            "is_bootstrap_node": true
          },
          {}
        ],
        "labels": {
          "rpc_node": "true"
        },
        "runs": [
          "octez_node",
          "baker",
          "logger",
          "metrics"
        ],
        "storage_size": "15Gi"
      },
      "us": {
        "instances": [
          {},
          {}
        ],
        "runs": [
          "octez_node",
          "baker"
        ],
        "storage_size": "15Gi"
      }
    }

  OCTEZ_SIGNERS: |
    {
      "octez-signer-0": {
        "accounts": [
          "tezos-baking-node-0"
        ],
        "name": "tezos-signer-0"
      }
    }
  TACOINFRA_SIGNERS: |
    {
      "tacoinfra-signer": {
        "accounts": [
          "tacoinfraSigner"
        ]
      }
    }
---
# Source: tezos-chain/templates/configs.yaml
apiVersion: v1
data:
  tacoinfraSigner-013-PtJakart-per-block-votes.json: "{\"liquidity_baking_toggle_vote\":\"pass\"}"
kind: ConfigMap
metadata:
  name: per-block-votes
  namespace: testing
---
# Source: tezos-chain/templates/tacoinfra-remote-signer/main.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: file-ratchet
  namespace: testing
  labels:
    helm.sh/chart: tezos-chain-0.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  resources:
    requests:
      storage: 8Ki
  accessModes:
    - ReadWriteOnce
---
# Source: tezos-chain/templates/octez-signer.yaml
apiVersion: v1
kind: Service
metadata:
  name: octez-signer
  namespace: testing
spec:
  clusterIP: None
  ports:
    - port: 6732
      name: signer
  selector:
    app: octez-signer
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: tezos-node-rpc
  namespace: testing
spec:
  ports:
    - port: 8732
      name: rpc
  selector:
    appType: octez-node
  type: NodePort
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: as
  labels:
    appType: octez-node
spec:
  ports:
    - port: 8732
      name: rpc
    - port: 9732
      name: p2p
    - port: 9932
      name: metrics
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: as
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: eu
  labels:
    appType: octez-node
spec:
  ports:
    - port: 8732
      name: rpc
    - port: 9732
      name: p2p
    - port: 9932
      name: metrics
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: eu
---
# Source: tezos-chain/templates/static.yaml
apiVersion: v1
kind: Service
metadata:
  name: us
  labels:
    appType: octez-node
spec:
  ports:
    - port: 8732
      name: rpc
    - port: 9732
      name: p2p
    - port: 9932
      name: metrics
  publishNotReadyAddresses: true
  clusterIP: None
  selector:
    node_class: us
---
# Source: tezos-chain/templates/tacoinfra-remote-signer/main.yaml
apiVersion: v1
kind: Service
metadata:
  name: tacoinfra-signer
  namespace: testing
  labels:
    helm.sh/chart: tezos-chain-0.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 5000
  selector:
    appType: tacoinfra-remote-signer
    signerName: tacoinfra-signer
---
# Source: tezos-chain/templates/tacoinfra-remote-signer/main.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tacoinfra-signer
  labels:
    helm.sh/chart: tezos-chain-0.0.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      appType: tacoinfra-remote-signer
      signerName: tacoinfra-signer
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        appType: tacoinfra-remote-signer
        signerName: tacoinfra-signer
        app.kubernetes.io/instance: release-name
    spec:
      serviceAccountName: tacoinfra-signer
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
        - name: copy-configmap
          image: ghcr.io/oxheadalpha/tacoinfra-remote-signer:0.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
            capabilities:
              drop:
                - ALL
              add:
                - CAP_CHOWN # chown
                - CAP_FOWNER # chmod
                - CAP_DAC_OVERRIDE # cp
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              cp /etc/signer-config/* /app/signer-config
              chown -R 999:999 /app/signer-config /etc/file_ratchets
              chmod 770 /app/signer-config
              chmod 770 /etc/file_ratchets
          volumeMounts:
            - name: signer-secret
              mountPath: /etc/signer-config
            - name: signer-config
              mountPath: /app/signer-config
            - name: file-ratchet
              mountPath: /etc/file_ratchets
        - name: create-keys-json
          image: ghcr.io/oxheadalpha/tacoinfra-remote-signer:0.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command: ["python"]
          args:
            - "-c"
            - |
             """Get the public key hashes of the accounts provided via the signer's
             ConfigMap. Create json objects with the hashes as the keys and write them to
             keys.json. The signer will read the file to determine keys it is signing for."""
             
             import json
             import logging
             import sys
             from os import path
             
             from pytezos import Key
             
             config_path = "./signer-config"
             accounts_json_path = f"{config_path}/accounts.json"
             
             if not path.isfile(accounts_json_path):
                 logging.warning("accounts.json file not found. Exiting.")
                 sys.exit(0)
             
             keys = {}
             
             with open(accounts_json_path, "r") as accounts_file:
                 accounts = json.load(accounts_file)
                 for account in accounts:
                     key = Key.from_encoded_key(account["key"])
                     if key.is_secret:
                         raise ValueError(
                             f"'{account['account_name']}' account's key is not a public key."
                         )
                     keys[key.public_key_hash()] = {
                         "account_name": account["account_name"],
                         "public_key": account["key"],
                         "key_id": account["key_id"],
                     }
             
             logging.info(f"Writing keys to {config_path}/keys.json...")
             with open(f"{config_path}/keys.json", "w") as keys_file:
                 keys_json = json.dumps(keys, indent=2)
                 print(keys_json, file=keys_file)
                 logging.info(f"Wrote keys.")
                 logging.debug(f"Keys: {keys_json}")
             
          volumeMounts:
            - name: signer-config
              mountPath: /app/signer-config
      containers:
        - name: remote-signer
          image: ghcr.io/oxheadalpha/tacoinfra-remote-signer:0.1.0
          imagePullPolicy: IfNotPresent
          args: ["kms"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: 5000
          volumeMounts:
            - name: file-ratchet
              mountPath: /etc/file_ratchets
            - name: signer-config
              mountPath: /app/signer-config
              readOnly: true
          env:

          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
      volumes:
        - name: signer-secret
          secret:
            secretName: tacoinfra-signer
        - name: signer-config
          emptyDir: {}
        - name: file-ratchet
          persistentVolumeClaim:
            claimName: file-ratchet
---
# Source: tezos-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: as
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: as
  selector:
    matchLabels:
      node_class: as
  template:
    metadata:
      labels:
        appType: octez-node
        node_class: as
    spec:
      containers:        
        - name: octez-node
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              #!/bin/sh
              
              set -xe
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing octez-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/octez-node run				\
              			--bootstrap-threshold 0			\
              			--config-file /etc/tezos/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: octez-node
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          ports:
            - containerPort: 8732
              name: tezos-rpc
            - containerPort: 9732
              name: tezos-net
            - containerPort: 9932
              name: metrics
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                                        
        - name: sidecar
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: as
            - name: DAEMON
              value: sidecar
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi        
      initContainers:                        
        - name: config-generator
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: as
            - name: DAEMON
              value: config-generator
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts                        
        - name: wait-for-dns
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - wait-for-dns
          envFrom:
            - configMapRef:
                name: tezos-config
          env:
            - name: DAEMON
              value: wait-for-dns
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - name: upgrade-storage
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              if [ ! -e /var/tezos/node/data/context/store.dict ]
              then
                printf "No store in data dir found, probably initial start, doing nothing."
                exit 0
              fi
              octez-node upgrade storage --config /etc/tezos/config.json
              
          envFrom:
          env:
            - name: DAEMON
              value: upgrade-storage
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
      securityContext:
        fsGroup: 1000      
      volumes:
        - hostPath:
            path: /dev/net/tun
          name: dev-net-tun
        - emptyDir: {}
          name: config-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
        - name: per-block-votes
          configMap:
            name: per-block-votes
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
---
# Source: tezos-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eu
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 3
  serviceName: eu
  selector:
    matchLabels:
      node_class: eu
  template:
    metadata:
      labels:
        appType: octez-node
        node_class: eu
        baking_node: "true"
        rpc_node: "true"
    spec:
      containers:        
        - name: octez-node
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              #!/bin/sh
              
              set -xe
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing octez-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/octez-node run				\
              			--bootstrap-threshold 0			\
              			--config-file /etc/tezos/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: octez-node
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          ports:
            - containerPort: 8732
              name: tezos-rpc
            - containerPort: 9732
              name: tezos-net
            - containerPort: 9932
              name: metrics
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                
            
        - name: baker-0-013-ptjakart
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              TEZ_VAR=/var/tezos
              TEZ_BIN=/usr/local/bin
              CLIENT_DIR="$TEZ_VAR/client"
              NODE_DIR="$TEZ_VAR/node"
              NODE_DATA_DIR="$TEZ_VAR/node/data"
              BAKER_EXTRA_ARGS_FROM_ENV=${BAKER_EXTRA_ARGS}
              
              proto_command="013-PtJakart"
              
              my_baker_account="$(sed -n "$(($BAKER_INDEX + 1))p" < /etc/tezos/baker-account )"
              
              per_block_vote_file=/etc/tezos/per-block-votes/${my_baker_account}-${proto_command}-per-block-votes.json
              
              if [ $(cat $per_block_vote_file) == "null" ]; then
                cat << EOF
              You must pass per-block-votes (such as liquidity_baking_toggle_vote) in values.yaml, for example:
              protocols:
              - command: ${proto_command}
                vote:
                  liquidity_baking_toggle_vote: "on"
              EOF
                exit 1
              fi
              extra_args="--votefile ${per_block_vote_file}"
              
              if [ "${my_baker_account}" == "" ]; then
                while true; do
                  printf "This container is not baking, but exists "
                  printf "due to uneven numer of bakers within the statefulset\n"
                  sleep 300
                done
              fi
              
              CLIENT="$TEZ_BIN/octez-client -d $CLIENT_DIR"
              CMD="$TEZ_BIN/octez-baker-$proto_command -d $CLIENT_DIR"
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              
              while ! $CLIENT rpc get chains/main/blocks/head; do
                  sleep 5
              done
              
              exec $CMD run with local node $NODE_DATA_DIR ${extra_args} ${BAKER_EXTRA_ARGS_FROM_ENV} ${my_baker_account}
              
          envFrom:
          env:
            - name: DAEMON
              value: baker
            - name: BAKER_INDEX
              value: "0"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/tezos/per-block-votes
              name: per-block-votes
        - name: baker-1-013-ptjakart
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              TEZ_VAR=/var/tezos
              TEZ_BIN=/usr/local/bin
              CLIENT_DIR="$TEZ_VAR/client"
              NODE_DIR="$TEZ_VAR/node"
              NODE_DATA_DIR="$TEZ_VAR/node/data"
              BAKER_EXTRA_ARGS_FROM_ENV=${BAKER_EXTRA_ARGS}
              
              proto_command="013-PtJakart"
              
              my_baker_account="$(sed -n "$(($BAKER_INDEX + 1))p" < /etc/tezos/baker-account )"
              
              per_block_vote_file=/etc/tezos/per-block-votes/${my_baker_account}-${proto_command}-per-block-votes.json
              
              if [ $(cat $per_block_vote_file) == "null" ]; then
                cat << EOF
              You must pass per-block-votes (such as liquidity_baking_toggle_vote) in values.yaml, for example:
              protocols:
              - command: ${proto_command}
                vote:
                  liquidity_baking_toggle_vote: "on"
              EOF
                exit 1
              fi
              extra_args="--votefile ${per_block_vote_file}"
              
              if [ "${my_baker_account}" == "" ]; then
                while true; do
                  printf "This container is not baking, but exists "
                  printf "due to uneven numer of bakers within the statefulset\n"
                  sleep 300
                done
              fi
              
              CLIENT="$TEZ_BIN/octez-client -d $CLIENT_DIR"
              CMD="$TEZ_BIN/octez-baker-$proto_command -d $CLIENT_DIR"
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              
              while ! $CLIENT rpc get chains/main/blocks/head; do
                  sleep 5
              done
              
              exec $CMD run with local node $NODE_DATA_DIR ${extra_args} ${BAKER_EXTRA_ARGS_FROM_ENV} ${my_baker_account}
              
          envFrom:
          env:
            - name: DAEMON
              value: baker
            - name: BAKER_INDEX
              value: "1"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/tezos/per-block-votes
              name: per-block-votes
        - name: baker-2-013-ptjakart
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              TEZ_VAR=/var/tezos
              TEZ_BIN=/usr/local/bin
              CLIENT_DIR="$TEZ_VAR/client"
              NODE_DIR="$TEZ_VAR/node"
              NODE_DATA_DIR="$TEZ_VAR/node/data"
              BAKER_EXTRA_ARGS_FROM_ENV=${BAKER_EXTRA_ARGS}
              
              proto_command="013-PtJakart"
              
              my_baker_account="$(sed -n "$(($BAKER_INDEX + 1))p" < /etc/tezos/baker-account )"
              
              per_block_vote_file=/etc/tezos/per-block-votes/${my_baker_account}-${proto_command}-per-block-votes.json
              
              if [ $(cat $per_block_vote_file) == "null" ]; then
                cat << EOF
              You must pass per-block-votes (such as liquidity_baking_toggle_vote) in values.yaml, for example:
              protocols:
              - command: ${proto_command}
                vote:
                  liquidity_baking_toggle_vote: "on"
              EOF
                exit 1
              fi
              extra_args="--votefile ${per_block_vote_file}"
              
              if [ "${my_baker_account}" == "" ]; then
                while true; do
                  printf "This container is not baking, but exists "
                  printf "due to uneven numer of bakers within the statefulset\n"
                  sleep 300
                done
              fi
              
              CLIENT="$TEZ_BIN/octez-client -d $CLIENT_DIR"
              CMD="$TEZ_BIN/octez-baker-$proto_command -d $CLIENT_DIR"
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              
              while ! $CLIENT rpc get chains/main/blocks/head; do
                  sleep 5
              done
              
              exec $CMD run with local node $NODE_DATA_DIR ${extra_args} ${BAKER_EXTRA_ARGS_FROM_ENV} ${my_baker_account}
              
          envFrom:
          env:
            - name: DAEMON
              value: baker
            - name: BAKER_INDEX
              value: "2"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/tezos/per-block-votes
              name: per-block-votes
        - name: baker-3-013-ptjakart
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              TEZ_VAR=/var/tezos
              TEZ_BIN=/usr/local/bin
              CLIENT_DIR="$TEZ_VAR/client"
              NODE_DIR="$TEZ_VAR/node"
              NODE_DATA_DIR="$TEZ_VAR/node/data"
              BAKER_EXTRA_ARGS_FROM_ENV=${BAKER_EXTRA_ARGS}
              
              proto_command="013-PtJakart"
              
              my_baker_account="$(sed -n "$(($BAKER_INDEX + 1))p" < /etc/tezos/baker-account )"
              
              per_block_vote_file=/etc/tezos/per-block-votes/${my_baker_account}-${proto_command}-per-block-votes.json
              
              if [ $(cat $per_block_vote_file) == "null" ]; then
                cat << EOF
              You must pass per-block-votes (such as liquidity_baking_toggle_vote) in values.yaml, for example:
              protocols:
              - command: ${proto_command}
                vote:
                  liquidity_baking_toggle_vote: "on"
              EOF
                exit 1
              fi
              extra_args="--votefile ${per_block_vote_file}"
              
              if [ "${my_baker_account}" == "" ]; then
                while true; do
                  printf "This container is not baking, but exists "
                  printf "due to uneven numer of bakers within the statefulset\n"
                  sleep 300
                done
              fi
              
              CLIENT="$TEZ_BIN/octez-client -d $CLIENT_DIR"
              CMD="$TEZ_BIN/octez-baker-$proto_command -d $CLIENT_DIR"
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              
              while ! $CLIENT rpc get chains/main/blocks/head; do
                  sleep 5
              done
              
              exec $CMD run with local node $NODE_DATA_DIR ${extra_args} ${BAKER_EXTRA_ARGS_FROM_ENV} ${my_baker_account}
              
          envFrom:
          env:
            - name: DAEMON
              value: baker
            - name: BAKER_INDEX
              value: "3"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/tezos/per-block-votes
              name: per-block-votes
        - name: baker-4-013-ptjakart
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              TEZ_VAR=/var/tezos
              TEZ_BIN=/usr/local/bin
              CLIENT_DIR="$TEZ_VAR/client"
              NODE_DIR="$TEZ_VAR/node"
              NODE_DATA_DIR="$TEZ_VAR/node/data"
              BAKER_EXTRA_ARGS_FROM_ENV=${BAKER_EXTRA_ARGS}
              
              proto_command="013-PtJakart"
              
              my_baker_account="$(sed -n "$(($BAKER_INDEX + 1))p" < /etc/tezos/baker-account )"
              
              per_block_vote_file=/etc/tezos/per-block-votes/${my_baker_account}-${proto_command}-per-block-votes.json
              
              if [ $(cat $per_block_vote_file) == "null" ]; then
                cat << EOF
              You must pass per-block-votes (such as liquidity_baking_toggle_vote) in values.yaml, for example:
              protocols:
              - command: ${proto_command}
                vote:
                  liquidity_baking_toggle_vote: "on"
              EOF
                exit 1
              fi
              extra_args="--votefile ${per_block_vote_file}"
              
              if [ "${my_baker_account}" == "" ]; then
                while true; do
                  printf "This container is not baking, but exists "
                  printf "due to uneven numer of bakers within the statefulset\n"
                  sleep 300
                done
              fi
              
              CLIENT="$TEZ_BIN/octez-client -d $CLIENT_DIR"
              CMD="$TEZ_BIN/octez-baker-$proto_command -d $CLIENT_DIR"
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              
              while ! $CLIENT rpc get chains/main/blocks/head; do
                  sleep 5
              done
              
              exec $CMD run with local node $NODE_DATA_DIR ${extra_args} ${BAKER_EXTRA_ARGS_FROM_ENV} ${my_baker_account}
              
          envFrom:
          env:
            - name: DAEMON
              value: baker
            - name: BAKER_INDEX
              value: "4"
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/tezos/per-block-votes
              name: per-block-votes        
        - name: logger
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - logger
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: eu
            - name: DAEMON
              value: logger
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume                
        - name: sidecar
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: eu
            - name: DAEMON
              value: sidecar
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi        
      initContainers:                        
        - name: config-generator
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: eu
            - name: DAEMON
              value: config-generator
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts                        
        - name: wait-for-dns
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - wait-for-dns
          envFrom:
            - configMapRef:
                name: tezos-config
          env:
            - name: DAEMON
              value: wait-for-dns
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - name: upgrade-storage
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              if [ ! -e /var/tezos/node/data/context/store.dict ]
              then
                printf "No store in data dir found, probably initial start, doing nothing."
                exit 0
              fi
              octez-node upgrade storage --config /etc/tezos/config.json
              
          envFrom:
          env:
            - name: DAEMON
              value: upgrade-storage
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
      securityContext:
        fsGroup: 1000      
      volumes:
        - hostPath:
            path: /dev/net/tun
          name: dev-net-tun
        - emptyDir: {}
          name: config-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
        - name: per-block-votes
          configMap:
            name: per-block-votes
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
---
# Source: tezos-chain/templates/nodes.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: us
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 2
  serviceName: us
  selector:
    matchLabels:
      node_class: us
  template:
    metadata:
      labels:
        appType: octez-node
        node_class: us
        baking_node: "true"
    spec:
      containers:        
        - name: octez-node
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              #!/bin/sh
              
              set -xe
              
              # ensure we can run octez-client commands without specifying client dir
              ln -s /var/tezos/client /home/tezos/.tezos-client
              #
              # Not every error is fatal on start.  In particular, with zerotier,
              # the listen-addr may not yet be bound causing octez-node to fail.
              # So, we try a few times with increasing delays:
              
              for d in 1 1 5 10 20 60 120; do
              	/usr/local/bin/octez-node run				\
              			--bootstrap-threshold 0			\
              			--config-file /etc/tezos/config.json
              	sleep $d
              done
              
              #
              # Keep the container alive for troubleshooting on failures:
              
              sleep 3600
              
          envFrom:
          env:
            - name: DAEMON
              value: octez-node
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          ports:
            - containerPort: 8732
              name: tezos-rpc
            - containerPort: 9732
              name: tezos-net
            - containerPort: 9932
              name: metrics
          readinessProbe:
            httpGet:
              path: /is_synced
              port: 31732                
                                    
        - name: sidecar
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - sidecar
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: us
            - name: DAEMON
              value: sidecar
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
          resources:
            limits:
              memory: 100Mi
            requests:
              memory: 80Mi        
      initContainers:                        
        - name: config-generator
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:    
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: node
            - name: MY_NODE_CLASS
              value: us
            - name: DAEMON
              value: config-generator
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts                        
        - name: wait-for-dns
          image: "ghcr.io/oxheadalpha/tezos-k8s-utils:master"
          imagePullPolicy: IfNotPresent
          args:
            - wait-for-dns
          envFrom:
            - configMapRef:
                name: tezos-config
          env:
            - name: DAEMON
              value: wait-for-dns
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume        
        - name: upgrade-storage
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              
              if [ ! -e /var/tezos/node/data/context/store.dict ]
              then
                printf "No store in data dir found, probably initial start, doing nothing."
                exit 0
              fi
              octez-node upgrade storage --config /etc/tezos/config.json
              
          envFrom:
          env:
            - name: DAEMON
              value: upgrade-storage
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
      securityContext:
        fsGroup: 1000      
      volumes:
        - hostPath:
            path: /dev/net/tun
          name: dev-net-tun
        - emptyDir: {}
          name: config-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
        - name: per-block-votes
          configMap:
            name: per-block-votes
  volumeClaimTemplates:
    - metadata:
        name: var-volume
        namespace: testing
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 15Gi
---
# Source: tezos-chain/templates/octez-signer.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: octez-signer
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: octez-signer
  selector:
    matchLabels:
      app: octez-signer
  template:
    metadata:
      labels:
        app: octez-signer
    spec:
      containers:
      - name: octez-signer
        image: "tezos/tezos:v15-release"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6732
          name: signer
        command:
          - /bin/sh
        volumeMounts:
        - mountPath: /var/tezos
          name: var-volume
        args:
          - "-c"
          - |
            set -ex
            
            TEZ_VAR=/var/tezos
            TEZ_BIN=/usr/local/bin
            CLIENT_DIR="$TEZ_VAR/client"
            NODE_DIR="$TEZ_VAR/node"
            NODE_DATA_DIR="$TEZ_VAR/node/data"
            
            CMD="$TEZ_BIN/octez-signer -d $CLIENT_DIR launch http signer --magic-bytes 0x11,0x12,0x13 --check-high-watermark -a 0.0.0.0 -p 6732"
            
            # ensure we can run tezos-signer commands without specifying client dir
            ln -s /var/tezos/client /home/tezos/.tezos-signer
            
            exec $CMD
            
      initContainers:
      - image: ghcr.io/oxheadalpha/tezos-k8s-utils:master
        imagePullPolicy: IfNotPresent
        name: config-generator
        args:
          - "config-generator"
        envFrom:
          - configMapRef:
              name: tezos-config
        env:
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MY_POD_TYPE
            value: signing
        volumeMounts:
          - mountPath: /var/tezos
            name: var-volume
          - mountPath: /etc/secret-volume
            name: tezos-accounts
      securityContext:
        fsGroup: 1000
      volumes:
        - emptyDir: {}
          name: var-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
---
# Source: tezos-chain/templates/activate-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: activate-job
  namespace: testing
spec:
  template:
    metadata:
      name: activate-job
    spec:
      containers:        
        - name: chain-initiator
          image: "tezos/tezos:v15-release"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              CLIENT="/usr/local/bin/octez-client --endpoint http://tezos-node-rpc:8732"
              
              until $CLIENT rpc get /chains/main/blocks/head/header | grep '"level":'; do
                  sleep 2
              done
              
              set -x
              set -o pipefail
              if ! $CLIENT rpc get /chains/main/blocks/head/header | grep '"level": 0,'; then
                  echo "Chain already activated, considering activation successful and exiting"
                  exit 0
              fi
              
              echo Activating chain:
              $CLIENT -d /var/tezos/client --block					\
              	genesis activate protocol					\
              	PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY				\
              	with fitness 1 and key						\
              	$( cat /etc/tezos/activation_account_name )			\
              	and parameters /etc/tezos/parameters.json 2>&1 | head -200
              
          envFrom:
          env:
            - name: DAEMON
              value: chain-initiator
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
      initContainers:
        - image: ghcr.io/oxheadalpha/tezos-k8s-utils:master
          imagePullPolicy: IfNotPresent
          name: config-generator
          args:
            - config-generator
          envFrom:
            - configMapRef:
                name: tezos-config
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_TYPE
              value: activating
          volumeMounts:
            - mountPath: /etc/tezos
              name: config-volume
            - mountPath: /var/tezos
              name: var-volume
            - mountPath: /etc/secret-volume
              name: tezos-accounts
      restartPolicy: Never
      volumes:
        - emptyDir: {}
          name: config-volume
        - emptyDir: {}
          name: var-volume
        - name: tezos-accounts
          secret:
            secretName: tezos-secret
