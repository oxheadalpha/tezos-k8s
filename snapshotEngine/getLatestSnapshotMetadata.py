import json
from pathlib import Path
from genericpath import exists

"""
    "Latest" means the highest version that the Tezos node storage artifacts website will offer.
    This is currently the LOWEST version number among a list of versions for ecosystem stability purposes.

    At this time this script gets as list of all of the current snapshots by compiling
    all of the metadata of every snapshot available (base.json) from each network(chain name), 
    generates a list of versions currently served, picks the LOWEST (for ecosystem stability) available and
    serves that on the "Download Most Recent" page.  
    
    All versions of all available artifacts are on the "Browse All" page.

    NOTES:
    The word "snapshot" is thrown around loosely, when this actually means a "Tezos node storage artifact", meaning-
    an artifact or single file representation of the storage of a Tezos node. Depending on the history mode of the
    node, these artifacts are available in a LZ4-compressed, tarballed directory (.lz4) and a Tezos snapshot (.rolling).
"""

# This file is generated by ./getAllSnapshotMetadata.py and is a compilation of all base.json files
# currently available from all chains.
filename='tezos-snapshots.json'

# ./getAllSnapshotMetadata.py is executed by ./zip-and-upload.sh. Occasionally tezos-snapshots.json
# fails to exist and this will catch that instead of throwing a bizarre Python stack trace.
if exists(filename):
    print('SUCCESS tezos-snapshots.json exists locally!')
    with open(filename,'r') as localJson:
        snapshots = json.load(localJson)
else:
    print('ERROR tezos-snapshots.json does not exist locally!')

# We're going to take the giant list of Tezos node storage artifact metadata and
# group it by network.
snapshots_per_network = {}

# List of Tezos node storage artifacts available on the "Download Most Recent" page.
latest_snapshots = [{ "name": "example", "latest_snapshots" : {}}]

# List of Tezos node storage artifacts available on the "Browse All" page.
all_snapshots = [{ "name": "example", "all_snapshots" : {}}]

# Let the grouping begin!
for snapshot in snapshots:
    network = snapshot["chain_name"]
    if network not in snapshots_per_network:
        snapshots_per_network[network] = []
    snapshots_per_network[network].append(snapshot)

# This section begins where we will be figuring out which version of Tezos node storage artifacts we will offer on 
# the "Download Most Recent" page and consider as "latest".
# This breaks up the list we grouped above by network and lets us iterate through this grouping as this is how
# the Tezos node storage artifacts are grouped and served on the website.
for network, snapshots in snapshots_per_network.items():
    network_latest_snapshots = {}
    network_snapshots = {}

    # This list comprehension can be confusing, but what is happening here is we are currently handling a list of all Tezos node storage artifacts for 
    # a particular network.  Now we're going to further break this into groups of artifacts for a given history mode and artifact type (tarball or tezos-snapshot)
    for (artifact_type, history_mode, path) in [("tarball", "rolling", "rolling-tarball"), ("tarball", "archive", "archive-tarball"), ("tezos-snapshot", "rolling", "rolling")]:

        # List of snapshot metadata for this particular artifact type and history mode
        typed_snapshots = [s for s in snapshots if s["artifact_type"] == artifact_type and s["history_mode"] == history_mode]

        # Lowest version is the top item (int) of a sorted unique list of all the versions for this particular artifact type and history mode
        lowest_octez_version = sorted(list(set([ s['tezos_version']['version']['major'] for s in typed_snapshots ])))[0]

        try:
            # Keep list of all snapshots for this particular chain later used to build the all_snapshots lists
            network_snapshots[path] = typed_snapshots
        except IndexError:
            continue

        # Latest offered should only show oldest supported build so let's filter by the oldest supported version we found above
        typed_snapshots = [d for d in typed_snapshots if d['tezos_version']['version']['major'] == lowest_octez_version]

        try:
            # Latest snapshot of type is the first item in typed_snapshots which we just filtered by the latest supported tezos build
            network_latest_snapshots[path] = typed_snapshots[0]
        except IndexError:
            continue

    # This becomes the list of snapshots served on "Download Most Recent"
    latest_snapshots.append(
        { "name": network, "permalink": network+"/index.html", "latest_snapshots": network_latest_snapshots })
    # This becomes the list of snapshots served on "Browse all"
    all_snapshots.append(
        { "name": network, "permalink": network+"/list.html", "snapshots": network_snapshots })

# snapshot_jekyll_data.json is consumed by jekyll to later
Path("_data").mkdir(parents=True, exist_ok=True)
with open(f"_data/snapshot_jekyll_data.json", 'w') as f:
    json.dump({"latest_snapshots": latest_snapshots, "all_snapshots": all_snapshots}, f, indent=2)
