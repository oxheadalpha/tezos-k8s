{{- define "tezos.tzkt.setDbConnectionEnvVar" -}}
{{ print " " "server=localhost;port=5432;database=$(POSTGRES_DB);username=$(POSTGRES_USER);password=$(POSTGRES_PASSWORD);" }}
{{- end -}}


{{- if (include "tezos.shouldDeployTzktIndexer" .) }}
{{- $tzkt_indexer := get (.Values.indexers | default dict) "tzkt" }}
{{- /*
 The path of a downloaded snapshot.
 The file's name format is "{CHAIN_NAME}-{indexer_image_tag}.backup"
*/}}
{{- $snapshot_file := print "/etc/db-snapshot/" .Values.node_config_network.chain_name "-" $tzkt_indexer.indexer_image_tag ".backup" }}
{{- /*
 A file every pod uses to remember its imported snapshot.
 By keeping track, pods won't try to re-upgrade their db on restarts.
*/}}
{{- $MY_CURRENT_SNAPSHOT_FILE := print "/etc/db-snapshot/current-snapshot.txt" }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.tzkt_indexer_statefulset.name }}
  namespace: {{ .Release.Namespace }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ $tzkt_indexer.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.tzkt_indexer_statefulset.name }}
  serviceName: ""
  template:
    metadata:
      labels:
        app: {{ .Values.tzkt_indexer_statefulset.name }}
    spec:
      initContainers:
      {{- if $tzkt_indexer.db_snapshot_url }}
        - image: {{ .Values.tezos_k8s_images.utils }}
          name: download-db-snapshot
          volumeMounts:
            - name: indexer-db
              mountPath: /etc/db-snapshot
              subPath: db-snapshot
          env:
            - name: SNAPSHOT_URL
              value: {{ .Values.indexers.tzkt.db_snapshot_url }}
            - name: SNAPSHOT_FILE
              value: {{ $snapshot_file }}
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              set -ex
              SHOULD_UPGRADE_INDEXER={{ $tzkt_indexer.upgrade_indexer }}

              # If there is no db
              if [ ! -d "/etc/indexer-db/pgdata" -o "$SHOULD_UPGRADE_INDEXER" ]; then

                if [ ! -f "$SNAPSHOT_FILE" ];
                then
                  echo "Downloading db snapshot from $SNAPSHOT_URL ..."
                  curl -LfSs -o "$SNAPSHOT_FILE" "$SNAPSHOT_URL"
                  echo "Successfully downloaded snapshot"
                else
                  echo "Snapshot already exists. Not downloading."
                fi

              else
                echo "Database '{{ $tzkt_indexer.config.db_name }}' already exists. Skipping download."
              fi
        {{- if $tzkt_indexer.upgrade_indexer }}
        - name: upgrade-db
          image: postgres:13
          volumeMounts:
            - name: indexer-db
              mountPath: /var/lib/postgresql/data
              subPath: data
            - name: indexer-db
              mountPath: /etc/db-snapshot
              subPath: db-snapshot
            - name: import-db-script
              mountPath: /etc/import-script
          env:
          {{- /* https://github.com/docker-library/docs/blob/master/postgres/README.md#pgdata */}}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: SNAPSHOT_URL
              value: {{ .Values.indexers.tzkt.db_snapshot_url }}
            - name: SNAPSHOT_FILE
              value: {{ $snapshot_file }}
          envFrom:
            - secretRef:
                name: db-creds
          securityContext:
          {{- /* The postgres server needs to be run by a non-root user */}}
            runAsUser: 999
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              if [ ! -d "$PGDATA" ]; then
                echo "No db exists to upgrade. Exiting."
                exit 0
              fi

              MY_CURRENT_SNAPSHOT_FILE={{ $MY_CURRENT_SNAPSHOT_FILE }}
              if [ -f "$MY_CURRENT_SNAPSHOT_FILE" ]; then
                current_snapshot=$(cat "$MY_CURRENT_SNAPSHOT_FILE")
                if [ "$current_snapshot" = "$SNAPSHOT_URL" ]; then
                  echo "Already upgraded to $current_snapshot. Exiting."
                  exit 0
                fi
              fi

              pg_ctl start
              /etc/import-script/import-db-snapshot.sh
              pg_ctl stop
        {{- end }}
      {{- end }}
        - image: {{ .Values.images.tezos }}
          name: get-chain-id
          volumeMounts:
            - name: tzkt-env
              mountPath: /tzkt
          command:
            - /bin/sh
          args:
            - "-c"
            - |
              ENV_FILE="/tzkt/tzkt.env"
              touch "$ENV_FILE"

              # Get the chain id
              CLIENT="/usr/local/bin/tezos-client -E {{ $tzkt_indexer.config.rpc_url }}"
              until $CLIENT rpc get /version; do sleep 2; done
              CHAIN_ID=$($CLIENT rpc get /chains/main/chain_id)
              echo "Got chain id: $CHAIN_ID"
              echo "export TZKT_TezosNode__ChainId=$CHAIN_ID" >> "$ENV_FILE"
      containers:
        - image: "{{ $tzkt_indexer.api_image }}:{{ $tzkt_indexer.api_image_tag }}"
          name: api
          ports:
            - containerPort: 5000
          env:
          - name: Logging__LogLevel__Default
            value: {{ $tzkt_indexer.config.api_log_level }}
          - name: ConnectionStrings__DefaultConnection
            value: {{- include "tezos.tzkt.setDbConnectionEnvVar" . }}
          envFrom:
          - secretRef:
              name: db-creds
        - image: "{{ $tzkt_indexer.indexer_image }}:{{ $tzkt_indexer.indexer_image_tag }}"
          name: indexer
          volumeMounts:
            - name: tzkt-env
              mountPath: /app/data
          env:
          - name: TZKT_TezosNode__Endpoint
            value: {{ $tzkt_indexer.config.rpc_url }}
          - name: TZKT_Logging__LogLevel__Default
            value: {{ $tzkt_indexer.config.indexer_log_level }}
          - name: TZKT_ConnectionStrings__DefaultConnection
            value: {{- include "tezos.tzkt.setDbConnectionEnvVar" . }}
          envFrom:
          - secretRef:
              name: db-creds
          command:
            - /bin/bash
          args:
            - "-c"
            - |
              # Set TZKT_TezosNode__ChainId env var
              . /app/data/tzkt.env
              dotnet Tzkt.Sync.dll
        - image: postgres:13
          name: db
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: indexer-db
              mountPath: /var/lib/postgresql/data
              subPath: data
            {{- if $tzkt_indexer.db_snapshot_url }}
            - name: indexer-db
              mountPath: /etc/db-snapshot
              subPath: db-snapshot
            - name: import-db-script
              mountPath: /docker-entrypoint-initdb.d
            {{- end }}
          env:
          {{- /* https://github.com/docker-library/docs/blob/master/postgres/README.md#pgdata */}}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            {{- if $tzkt_indexer.db_snapshot_url }}
            - name: SNAPSHOT_URL
              value: {{ .Values.indexers.tzkt.db_snapshot_url }}
            - name: SNAPSHOT_FILE
              value: {{ $snapshot_file }}
            {{- end }}
          envFrom:
          - secretRef:
              name: db-creds
      volumes:
        - name: tzkt-env
          emptyDir: {}
        {{- if $tzkt_indexer.db_snapshot_url }}
        - name: import-db-script
          configMap:
            name: import-db-script
            {{- if $tzkt_indexer.upgrade_indexer }}
            {{- /* The upgrade container needs to execute the file as non root */}}
            defaultMode: 0777
            {{- end }}
        {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: indexer-db
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: {{ .Values.tzkt_indexer_statefulset.storageClassName }}
        resources:
          requests:
            storage: "50Gi"
---
apiVersion: v1
kind: Secret
metadata:
  name: db-creds
data:
  POSTGRES_USER: {{ b64enc $tzkt_indexer.config.db_user }}
  POSTGRES_PASSWORD: {{ b64enc $tzkt_indexer.config.db_password }}
  POSTGRES_DB: {{ b64enc $tzkt_indexer.config.db_name }}

{{- if $tzkt_indexer.db_snapshot_url }}
---
{{/*
This script is mounted into postgres's /docker-entrypoint-initdb.d directory
where it is run on db initialization.
*/}}
kind: ConfigMap
apiVersion: v1
metadata:
  name: import-db-script
  namespace: {{ .Release.Namespace }}
data:
  import-db-snapshot.sh: |
    #!/bin/bash

    echo "Importing snapshot $SNAPSHOT_URL"
    pg_restore -U "$POSTGRES_USER" \
    -v --no-owner --clean \
    --if-exists --exit-on-error \
    --dbname "$POSTGRES_DB" \
    -1 "$SNAPSHOT_FILE"

    MY_CURRENT_SNAPSHOT_FILE={{ $MY_CURRENT_SNAPSHOT_FILE }}
    if [ ! -f "$MY_CURRENT_SNAPSHOT_FILE" ]; then
      touch "$MY_CURRENT_SNAPSHOT_FILE"
    fi

    echo "$SNAPSHOT_URL" > "$MY_CURRENT_SNAPSHOT_FILE"

    echo "Snapshot imported"
  {{ if not $tzkt_indexer.keep_snapshot_after_import }}
    rm -fv "$SNAPSHOT_FILE"
  {{ end }}
{{- end }}


{{- end }}
