# Is the values file an invitation for a private chain
is_invitation: false

# A chain using Zerotier would be a private chain
# zerotier_config:
#   zerotier_network: YOUR_NETWORK_ID_HERE
#   zerotier_token: YOUR_ZEROTIER_TOKEN_HERE

# Images not part of the tezos-k8s repo go here
images:
  octez: tezos/tezos:v11-release
  tezedge: tezedge/tezedge:v1.6.8
# Images that are part of the tezos-k8s repo go here with 'dev' tag
tezos_k8s_images:
  utils: tezos-k8s-utils:dev
  zerotier: tezos-k8s-zerotier:dev

## Properties that are templated for some k8s resources. There are container
## scripts that will look up some of these values. They should not be modified.
tzkt_indexer_statefulset:
  name: tzkt-indexer
signer_statefulset:
  name: tezos-signer
  pod_type: signing
chain_initiator_job:
  name: chain-initiator
  pod_type: activating

# For non-public chains the defualt mutez given to an account if the
# account is not explicitly set below.
bootstrap_mutez: "4000000000000"

# # ACCOUNTS
#
# When running bakers for a public net, you must provide your own secret keys.
# For non public networks you can change this setting to true, and deterministic
# keys will be generated for your nodes automatically. If a genesis block hash
# is not provided, that will also be generated. This is helpful for spinning up
# local testnets.
should_generate_unsafe_deterministic_data: false
#
# - Public chains: Accounts do not get `is_bootstrap_baker_account` and
# `bootstrap_balance` fields.
# - Non-public chains: If you don't specify accounts needed by nodes, they can
#   be created deterministically via the above setting. If specifying, accounts
#   can be given a bootstrap balance and can also be configured to be bootstrap
#   baker accounts. Accounts with balances set to "0" will be imported by the
#   node but they will not be bootstrap accounts. If you don't set a bootstrap
#   balance, it will default to the `bootstrap_mutez` field above.
#
accounts: {}
#   baker0:
#     key: edsk...
#     type: secret
#     is_bootstrap_baker_account: true
#     bootstrap_balance: "50000000000000"

#   baker1:
#     key: edpk...
#     type: public
#     is_bootstrap_baker_account: false
#     bootstrap_balance: "4000000000000"

## NODES
##
## "nodes" is a dictionary where each key/value pair defines a statefulset and a
## number of instances thereof. The name (key) defines the name of the
## statefulset and will be the base of the pod names. The instances are defined
## as a list because their names are simply -N appended to the statefulsetname.
## Said names are typically kebab case.
##
## https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
##
## Params at the statefulset level:
## - "config": The "config" property should mimic the structure of a node's
##             config.json. Run `tezos-node config --help` for more info.
##             If present at the statefulset level, it overrides it in
##             node_globals.
## - "storage_size": the size of the PV
## - "images": Optional specification of images to use for the tezos node and
##           baker. Options are "octez" with a tezos/tezos image or
##           "tezedge" with a tezedge/tezedge image. If no images are provided,
##           the containers will default to the images defined in the "images"
##           field up above.
## - "runs": A list of containers to run. A tezos node implementation is required.
##         Options being "octez_node" or "tezedge_node". Other optional
##         containers are "accuser", "baker", "logger", and "metrics".
## - "local_storage": use local storage instead of a volume. The storage will be
##                  wiped when the node restarts for any reason. Useful when
##                  faster IO is desired. Defaults to false.
## - "instances": a list of nodes to fire up, each is a dictionary defining:
##   - "bake_using_account": Account name that should be used for baking.
##   - "bake_using_accounts": List of account names that should be used for baking.
##   - "is_bootstrap_node": Is this node a bootstrap peer.
##   - "identity": An optional map containing a pre-generated Tezos node
##                 identity. The identity file will be created at
##                 /var/tezos/node/data/identity.json. Required fields are
##                 "peer_id", "public_key", "secret_key", and
##                 "proof_of_work_timestamp".
##   - "config": same as the outer level, pass through to config.json.  At
##               the instance level, it overrides the statefulset level.
## - "node_selector": Specify a kubernetes node selector in 'key: value' format
##     for your tezos nodes.
## - "labels": https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##   NOTE: the labels appType, node_class, and baking_node are set
##         automatically for you.
##
##
## Defaults are filled in for most of the above values.  You can also provide
## global defaults for all nodes via a node_globals: section which is also
## a dictionary.  Currently, the only key defined is "config" which provides
## a default for that section in the nodes:.
##
## Example config:
##
#
# node_globals:
#   config:
#     shell:
#       history_mode: full
# nodes:
#   rolling-baking-node:
#     config:
#       shell:
#         history_mode: rolling
#     labels:
#       # Example labels you might use to specify certain attributes of your nodes.
#       peer_node: "true" # Forward P2P traffic to this node types instances
#       rpc_node: "true" # Forward RPC traffic to this node types instances
#     node_selector:
#       nodeSelectorKey: nodeSelectorValue
#     storage_size: 15Gi
#     images: # (optional field)
#       octez: tezos/tezos:v...
#     # tezedge: tezedge/tezedg:v...
#     local_storage: false
#     runs:
#       - octez_node
#     # - tezedge_node
#       - baker
#     instances:
#       - bake_using_account: baker0
#         is_bootstrap_node: true
#         # Note the following config section overrides the above one even
#         # if we make them the same in this example.
#         config:
#           shell:
#             history_mode: rolling
#         # optional - pass a node identity so it is not generated at first boot
#         # This is useful for local storage nodes which must do that at every boot
#         # The structure must match the node's identity.json file
#         identity:
#            peer_id: id...
#            public_key: ...
#            secret_key: ...
#            proof_of_work_stamp: ...
#   rolling-node:
#     labels:
#       # Example labels you might use to specify certain attributes of your nodes.
#       peer_node: "true"
#       rpc_node: "true"
#     images: # (optional field)
#       tezedge: tezedge/tezedge:v...
#     runs: ["tezedge_node"]
#     instances:
#       - {}
#       - {}

nodes:
  rolling-node:
#    labels:
#      rpc_node: "true"
#      peer_node: "true"
    storage_size: 100Gi
    runs:
      - octez_node
    instances:
      - is_bootstrap_node: false
        config:
          shell:
            history_mode: rolling

## Configuration for K8s Service resources. Configuring the labels selector of a
## service will result in the service forwarding traffic only to pods that have
## matching labels.
services:
  ## Configure the labels selector of the Tezos node RPC service. Traffic will
  ## be forwarded to all nodes if no labels are specified.
  tezos_node_rpc:
    selector:
#      rpc_node: "true"

# Define and use external remote signers.
# Bakers automatically use signers when configured.
signers: {}
#  tezos-signer-0:
#    sign_for_accounts:
#    - baker0

## Where full and rolling history mode nodes will get their Tezos snapshots from.
full_snapshot_url: https://mainnet.xtz-shots.io/full
rolling_snapshot_url: https://mainnet.xtz-shots.io/rolling

## Alternatively to a Tezos snapshot, you can download an LZ4-compressed
## filesystem tar of a node's data directory by setting `archive_tarball_url`
## and `rolling_tarball_url` fields to the URL of the file. NOTE:
## `rolling_tarball_url` and `rolling_snapshot_url` are mutually exclusive and
## cannot both be specified at the same time.
archive_tarball_url: http://tezos-tarballs.s3-website.us-east-2.amazonaws.com/mainnet-archive-tarball
# rolling_tarball_url: "http://tezos-tarballs.s3-website.us-east-2.amazonaws.com/mainnet-rolling-tarball"

# List of peers for nodes to connect to. Gets set under config.json `p2p` field
bootstrap_peers: []

# Identity generation difficulty.
expected_proof_of_work: 26

## Create a custom network using a config structure that is similar to a node's
## config.json. Run `tezos-node config --help` for more info.
##
# node_config_network:
#   chain_name: YOUR_CHAIN_NAME_HERE
#   genesis:
#     timestamp: "2021-03-04T20:00:00Z"
#     block: YOUR_GENESIS_BLOCK_HASH_HERE
#     protocol: Ps9mPmXaRzmzk35gbAYNCAw6UXdE2qoABTHbN2oEEc1qM7CwT9P
#   # The name of the account who's public key will be set downstream in
#   # config.json at `network.genesis_parameters.values.genesis_pubkey`.
#   activation_account_name: baker0
#
## For joining a public network:
## - If specifying the name of the network, the network's name must be
##   recognized by the docker image passed as .Values.images.octez above.
## - Additionally, you can pass a url that returns the config.json of the
##   network. Example: "https://teztnets.xyz/granadanet". In general you
##   shouldn't need this and should just specifiy the network's name.
node_config_network:
  chain_name: mainnet

protocols:
  # Tezos builds baker binaries for every supported protocol.
  # List here the protocols that you wish to run bakers for.
  # These binaries must be present in the docker image specified.
  # You may want to run two or more if you are expecting an on-chain upgrade.
  # Be mindful that running more protocols will start more containers in your
  # pods which may consume more memory.
  - command: 010-PtGRANAD
  #- command: alpha

## Activate a new chain from genesis. Uncommenting this will create an
## activation job. The activation job will activate the chain if the
## level is at zero, and do nothing otherwise, so this section can remain
## after chain activation.
##
# activation:
#   protocol_hash: PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV
#   # parameters.json
#   protocol_parameters:
#     preserved_cycles: 2
#     blocks_per_cycle: 8
#     blocks_per_commitment: 4
#     blocks_per_roll_snapshot: 4
#     blocks_per_voting_period: 64
#     time_between_blocks: ["10", "20"]
#     endorsers_per_block: 32
#     hard_gas_limit_per_operation: "800000"
#     hard_gas_limit_per_block: "8000000"
#     proof_of_work_threshold: "-1"
#     tokens_per_roll: "8000000000"
#     michelson_maximum_type_size: 1000
#     seed_nonce_revelation_tip: "125000"
#     origination_size: 257
#     block_security_deposit: "512000000"
#     endorsement_security_deposit: "64000000"
#     endorsement_reward: ["2000000", "200000"]
#     cost_per_byte: "1000"
#     hard_storage_limit_per_operation: "60000"
#     quorum_min: 2000
#     quorum_max: 7000
#     min_proposal_quorum: 500
#     initial_endorsers: 1
#     delay_per_missing_endorsement: "1"
#     baking_reward_per_endorsement: ["200000", "20000"]
#     minimal_block_delay: "2"
#     liquidity_baking_subsidy: "2500000"
#     liquidity_baking_sunset_level: 525600
#     liquidity_baking_escape_ema_threshold: 100000
#
#   # Pass url pointing to additional contracts that you want injected at activation.
#   # This data is typically too large to pass it directly inside helm chart.
#   bootstrap_contract_urls: []
#
#   # Use the "faucet" map to predictably create a desired number of faucet
#   # accounts. Change the seed to generate different sets of accounts.
#   # Pass the same map to the "tezos-faucet" chart in the same repository
#   # so you can deploy a website where people get free tez from the faucet.
#   faucet:
#     seed: "deterministic faucet seed"
#     number_of_accounts: 100

## Deploy an indexer with the chain. An indexer puts the chain
## contents in a database for efficient indexing. Most dapps need it.
## Supported indexers:
## * tzkt https://github.com/baking-bad/tzkt
#
## Templatized indexer configuration values go in the config field.
##
# indexers:
#   tzkt:
#     api_image: "bakingbad/tzkt-api"
#     api_image_tag: "1.6.4"
#     indexer_image: "bakingbad/tzkt-sync"
#     indexer_image_tag: "1.6.4"
#
#     ## Database volumeClaimTemplates config
#     storageClassName: ""
#     storage: "100Gi"
#     ## Statefulset annotations
#     # annotations:
#
#     ## Indexer replicas
#     replicas: 1
#
#     ## Tzkt provides new snapshots as they update their code. Update your
#     ## indexers by specifying new docker image tags and by using the matching
#     ## db_snapshot_url. Spin up an additional replica if you only have one to
#     ## avoid downtime. See tzkt's readme for public networks' db snapshot urls.
#     ## If you want to index a brand new archive node you are spinning up, just
#     ## let the indexer start syncing with it from scratch.
#     ## https://github.com/baking-bad/tzkt
#     db_snapshot_url: https://tzkt.fra1.digitaloceanspaces.com/snapshots/tzkt_v1.6_mainnet.backup
#
#     ## Configurable tzkt fields
#     config:
#       ## Url of the archive node to index. You will need to create an archive node up
#       ## above in the `nodes` section. The `rpc_url` field is looking for a node named
#       ## `archive-node`.
#       rpc_url: http://archive-node-0.archive-node:8732
#       db_name: db
#       db_user: foo
#       db_password: bar
#       # api_log_level: Debug
#       # indexer_log_level: Debug
