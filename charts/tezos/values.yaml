# Is the values file an invitation for a private chain
is_invitation: false

# A chain using Zerotier would be a private chain
# zerotier_config:
#   zerotier_network: YOUR_NETWORK_ID_HERE
#   zerotier_token: YOUR_ZEROTIER_TOKEN_HERE

# Images not part of the tezos-k8s repo go here
images:
  tezos: tezos/tezos:v9-release
  tezedge: simplestakingcom/tezedge:latest-release
# Images that are part of the tezos-k8s repo go here with 'dev' tag
tezos_k8s_images:
  utils: tezos-k8s-utils:dev
  zerotier: tezos-k8s-zerotier:dev

# Properties that are templated in Helm template files
tzkt_indexer_statefulset:
  name: tzkt-indexer
  storageClassName: ""
signer_statefulset:
  name: tezos-signer
  pod_type: signing
chain_initiator_job:
  name: chain-initiator
  pod_type: activating

# For non-public chains the defualt mutez given to an account if the
# account is not explicitly set below.
bootstrap_mutez: "4000000000000"

# # ACCOUNTS
#
# When running bakers for a public net, you must provide your own secret keys.
# For non public networks you can change this setting to true, and deterministic
# keys will be generated for your nodes automatically. If a genesis block hash
# is not provided, that will also be generated. This is helpful for spinning up
# local testnets.
should_generate_unsafe_deterministic_data: false
#
# - Public chains: Accounts do not get `is_bootstrap_baker_account` and
# `bootstrap_balance` fields.
# - Non-public chains: If you don't specify accounts needed by nodes, they can
#   be created deterministically via the above setting. If specifying, accounts
#   can be given a bootstrap balance and can also be configured to be bootstrap
#   baker accounts. Accounts with balances set to "0" will be imported by the
#   node but they will not be bootstrap accounts. If you don't set a bootstrap
#   balance, it will default to the `bootstrap_mutez` field above.
#
accounts: {}
#   tqtezos_baker_0:
#     key: edsk...
#     type: secret
#     is_bootstrap_baker_account: true
#     bootstrap_balance: "50000000000000"

#   tqtezos_regular_account_0:
#     key: edpk...
#     type: public
#     is_bootstrap_baker_account: false
#     bootstrap_balance: "4000000000000"

# # NODES
#
# nodes is a dictionary where each k/v pair defines a statefulset and
# a number of instances thereof.  The name (key) defines the name of the
# statefulset and will be the base of the pod names.  The instances are
# defined as a list because their names are simply -N appended to the
# statefulsetname.  Said names are typically kebab case.
#
# https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/
#
# Params at the statefulset level:
# - storage_size: the size of the PV
# - runs: a list of containers to run, e.g. "baker", "endorser"
# - instances: a list of nodes to fire up, each is a dictionary
#   defining:
#   - `bake_using_account`: The name of the account that should be used
#                         for baking.
#   - `is_bootstrap_node`: Is this node a bootstrap peer.
#   - config: The `config` property should mimic the structure
#             of a node's config.json.
#             Run `tezos-node config --help` for more info.
#
# defaults are filled in for most values.
#
# E.g.:
#
# nodes:
#  tezos-baking-node:
#    storage_size: 15Gi
#    runs:
#      - baker
#      - endorser
#    instances:
#      - bake_using_account: baker0
#        is_bootstrap_node: true
#        config:
#          shell:
#   tezos-node:
#     instances:
#       - {}
#       - {}

nodes:
  tezos-node:
    storage_size: 15Gi
    instances:
      - is_bootstrap_node: false
        config:
          shell:
            history_mode: rolling

# Define and use external remote signers.
# Bakers automatically use signers when configured.
signers: {}
#  tezos-signer-0:
#    sign_for_accounts:
#    - baker0

# Where full and rolling history mode nodes will get their snapshots from
full_snapshot_url: https://mainnet.xtz-shots.io/full
rolling_snapshot_url: https://mainnet.xtz-shots.io/rolling

# List of peers for nodes to connect to. Gets set under config.json `p2p` field
bootstrap_peers: []

# Identity generation difficulty.
expected_proof_of_work: 26

## Create a custom network using a config structure that is similar to a node's
## config.json. Run `tezos-node config --help` for more info.
#
# node_config_network:
#   chain_name: YOUR_CHAIN_NAME_HERE
#   genesis:
#     timestamp: "2021-03-04T20:00:00Z"
#     block: YOUR_GENESIS_BLOCK_HASH_HERE
#     protocol: PtYuensgYBb3G3x1hLLbCmcav8ue8Kyd2khADcL5LsT5R1hcXex
#   # The name of the account who's public key will be set downstream in
#   # config.json at `network.genesis_parameters.values.genesis_pubkey`.
#   activation_account_name: tqtezos_baker_0
#
## For joining a public network:
## - If specifying the name of the network, the network's name must be
##   recognized by the docker image passed as .Values.images.tezos above.
## - Additionally, you can pass a url that returns the config.json of the
##   network. Example: "https://teztnets.xyz/granadanet". In general you
##   shouldn't need this and should just specifiy the network's name.
node_config_network:
  chain_name: mainnet

protocols:
  # Tezos builds baker and endorser binaries for every supported protocol.
  # List here the protocols that you wish to run bakers and endorsers for.
  # These binaries must be present in the docker image specified.
  # You may want to run two or more if you are expecting an on-chain upgrade.
  # Be mindful that running more protocols will start more containers in your
  # pods which may consume more memory.
  - command: 009-PsFLoren
  #- command: alpha

# # Activate a new chain from genesis. Note, this is only for when your chain does
# # not exist yet. For subsequent deploys, remove this.
#
# activation:
#   protocol_hash: PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i
#   # parameters.json
#   protocol_parameters:
#     preserved_cycles: 2
#     blocks_per_cycle: 8
#     blocks_per_commitment: 4
#     blocks_per_roll_snapshot: 4
#     blocks_per_voting_period: 64
#     time_between_blocks: ["10", "20"]
#     endorsers_per_block: 32
#     hard_gas_limit_per_operation: "800000"
#     hard_gas_limit_per_block: "8000000"
#     proof_of_work_threshold: "-1"
#     tokens_per_roll: "8000000000"
#     michelson_maximum_type_size: 1000
#     seed_nonce_revelation_tip: "125000"
#     origination_size: 257
#     block_security_deposit: "512000000"
#     endorsement_security_deposit: "64000000"
#     endorsement_reward: ["2000000", "200000"]
#     cost_per_byte: "1000"
#     hard_storage_limit_per_operation: "60000"
#     test_chain_duration: "1966080"
#     quorum_min: 2000
#     quorum_max: 7000
#     min_proposal_quorum: 500
#     initial_endorsers: 1
#     delay_per_missing_endorsement: "1"
#     baking_reward_per_endorsement: ["200000", "20000"]
#
#   # Pass url pointing to additional contracts that you want injected at activation.
#   # This data is typically too large to pass it directly inside helm chart.
#   bootstrap_contract_urls: []
#   # Pass url pointing to a json file listing commitments (precursor to faucet accounts).
#   # This data is typically too large to pass it directly inside helm chart.
#   commitments_url: "https://bucket/commitments.json"

# Deploy an indexer with the chain. An indexer puts the chain
# contents in a database for efficient indexing. Most dapps need it.
# Supported indexers:
# * tzkt https://github.com/baking-bad/tzkt
#
# Templatized indexer configuration values go in the config field.
#
# indexers:
#   tzkt:
#     ## See tzkt's readme for public networks' db snapshot urls.
#     ## If you want to index a brand new archive node you are spinning up, just let
#     ## the indexer start syncing with it from scratch.
#     # db_snapshot_url: https://tzkt-snapshots.s3.eu-central-1.amazonaws.com/tzkt_v1.5.backup

#     # Configurable tzkt fields
#     config:
#       # url of the archive node to index
#       rpc_url: http://tezos-node-0.tezos-node:8732
#       db_name: db
#       db_user: foo
#       db_password: bar
#       # api_log_level: Debug
#       # indexer_log_level: Debug
